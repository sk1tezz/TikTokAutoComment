from aiogram import Router, F
from aiogram.types import Message, CallbackQuery, ReplyKeyboardRemove
from aiogram.fsm.context import FSMContext

from telegram.utils import keyboards as kb, texts as txt
from telegram.utils.states import Commenting_Link, Commenting_Recommendations

from ui2funcs.autocommenting import (post_comments_in_recommendations, add_task_in_commenting_link_tasks,
                                     get_len_tasks_in_commenting_link_tasks)
import adb

import asyncio

router = Router()

running_tasks = {}


@router.message(F.text == txt.kb_main)
async def start(message: Message):
    devices = adb.get_devices_list()
    if len(devices) > 0:
        await message.answer("üöÄ", reply_markup=ReplyKeyboardRemove())
        await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –Ω–∞ —á—Ç–æ –Ω–∞–∫—Ä—É—á–∏–≤–∞—Ç—å:", reply_markup=kb.start())
    else:
        await message.answer("–î–ª—è —Ä–∞–±–æ—Ç—ã —Å–æ—Ñ—Ç–∞ –ø–æ–¥–∫–ª—é—á–∏—Ç–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ")


@router.callback_query(F.data == "start:link")
async def commenting_link(callback: CallbackQuery, state: FSMContext):
    await callback.answer()

    await callback.message.edit_text("–ü—Ä–∏—à–ª–∏—Ç–µ: ¬´–°—Å—ã–ª–∫–∞ –Ω–∞ –≤–∏–¥–µ–æ | –¢–µ–∫—Å—Ç –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è¬ª", reply_markup=kb.back("start"))
    await state.set_state(Commenting_Link.commenting_link)


@router.message(Commenting_Link.commenting_link)
async def commenting_link_finish(message: Message):
    try:
        url, comment = message.text.split(" | ")

        if ".tiktok.com" not in url:
            await message.answer("–í—ã —É–∫–∞–∑–∞–ª–∏ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—Å—ã–ª–∫—É –Ω–∞ –≤–∏–¥–µ–æ. –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç")
            return

        add_task_in_commenting_link_tasks({"url": url, "comment": comment, "chatid": message.from_user.id})

        await message.answer(f"–£—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–ª –∑–∞–¥–∞—á—É:\n"
                             f"–°—Å—ã–ª–∫–∞ –Ω–∞ –≤–∏–¥–µ–æ: {url}\n"
                             f"–¢–µ–∫—Å—Ç –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è: {comment}\n", reply_markup=kb.back("start"))
    except ValueError:
        await message.answer("–í—ã –Ω–µ —É–∫–∞–∑–∞–ª–∏ –æ–¥–∏–Ω –∏–∑ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤. –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç")


@router.callback_query(F.data == "start:recommendations")
async def commenting_recommendations(callback: CallbackQuery, state: FSMContext):
    await callback.answer()

    len_tasks = get_len_tasks_in_commenting_link_tasks()
    if len_tasks > 0:
        await callback.message.answer(f"–ü–æ–¥–æ–∂–¥–∏—Ç–µ –ø–æ–∫–∞ —Å–æ—Ñ—Ç –ø—Ä–æ–π–¥—ë—Ç –≤—Å–µ –∑–∞–¥–∞—á–∏. –ö–æ–ª-–≤–æ –∑–∞–¥–∞—á: {len_tasks}")
        await callback.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –Ω–∞ —á—Ç–æ –Ω–∞–∫—Ä—É—á–∏–≤–∞—Ç—å:", reply_markup=kb.start())
        return

    await callback.message.edit_text("–ü—Ä–∏—à–ª–∏—Ç–µ: ¬´–¢–µ–∫—Å—Ç –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è | –õ–∏–º–∏—Ç –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ —Å –æ–¥–Ω–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞ | –ü–µ—Ä–∏–æ–¥ "
                                     "–º–µ–∂–¥—É –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è–º–∏ (–≤ —Å–µ–∫—É–Ω–¥–∞—Ö)¬ª", reply_markup=kb.back("start"))
    await state.set_state(Commenting_Recommendations.commenting_recommendations)


@router.message(Commenting_Recommendations.commenting_recommendations)
async def commenting_recommendations_finish(message: Message, state: FSMContext):
    try:
        comment, comments_in_one_account, comment_period = message.text.split(" | ")

        if type(comments_in_one_account) == str:
            if not comments_in_one_account.isdigit():
                await message.answer("–í—ã —É–∫–∞–∑–∞–ª–∏ –Ω–µ–≤–µ—Ä–Ω—ã–π –ª–∏–º–∏—Ç –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ —Å –æ–¥–Ω–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞. –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç")
                return
        if type(comment_period) == str:
            if not comment_period.isdigit():
                await message.answer("–í—ã —É–∫–∞–∑–∞–ª–∏ –Ω–µ–≤–µ—Ä–Ω—ã–π –ø–µ—Ä–∏–æ–¥ –º–µ–∂–¥—É –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è–º–∏. –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç")
                return

        await message.answer(f"–£—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—Å—Ç–∏–ª –∫–æ–º–º–µ–Ω—Ç–∏–Ω–≥ –ø–æ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è–º:\n"
                             f"–¢–µ–∫—Å—Ç –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è: {comment}\n"
                             f"–õ–∏–º–∏—Ç –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ —Å –æ–¥–Ω–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞: {comments_in_one_account}\n"
                             f"–ü–µ—Ä–∏–æ–¥ –º–µ–∂–¥—É –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è–º–∏: {comment_period} —Å–µ–∫\n",
                             reply_markup=kb.commenting_recommendations())

        task1_obj = asyncio.create_task(post_comments_in_recommendations(adb.get_devices_list()[0], comment,
                                                                         comments_in_one_account, comment_period,
                                                                         message.from_user.id))
        running_tasks["tasks"] = [task1_obj]

        await state.clear()
    except ValueError:
        await message.answer("–í—ã –Ω–µ —É–∫–∞–∑–∞–ª–∏ –æ–¥–∏–Ω –∏–∑ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤. –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç")


@router.message(F.text == "‚õîÔ∏è –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∑–∞–¥–∞—á—É")
async def commenting_recommendations_stop(message: Message):
    if "tasks" not in running_tasks:
        await message.answer("‚ö† –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞—á!", reply_markup=ReplyKeyboardRemove())
        await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –Ω–∞ —á—Ç–æ –Ω–∞–∫—Ä—É—á–∏–≤–∞—Ç—å:", reply_markup=kb.start())
    else:
        for task in running_tasks["tasks"]:
            task.cancel()
        running_tasks.pop("tasks", None)

        await message.answer('–ó–∞–¥–∞—á–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ ‚õîÔ∏è', reply_markup=ReplyKeyboardRemove())
        await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –Ω–∞ —á—Ç–æ –Ω–∞–∫—Ä—É—á–∏–≤–∞—Ç—å:", reply_markup=kb.start())


@router.callback_query(F.data == "back:start")
async def back(callback: CallbackQuery, state: FSMContext):
    await callback.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –Ω–∞ —á—Ç–æ –Ω–∞–∫—Ä—É—á–∏–≤–∞—Ç—å:", reply_markup=kb.start())
    await state.clear()
